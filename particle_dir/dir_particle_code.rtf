{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green64\blue0;\red0\green0\blue200;\red64\green64\blue64;
\red200\green0\blue0;}
\margl1440\margr1440\vieww11380\viewh16260\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs18 \cf0   \
  worldMem =\cf2  sprite\cf0 (\cf3 me\cf0 .\cf2 spritenum\cf0 ).\cf2 member\cf0 \
  worldMem.\cf2 resetWorld\cf0 ()\
  txt = worldMem.\cf2 newTexture\cf0 (\cf4 "particle"\cf0 ,\cf2  #fromCastmember\cf0 ,\cf2  member\cf0 (\cf4 "whiteFuzz"\cf0 ))\
  txt.\cf2 renderformat\cf0 =\cf2 #rgba8888\cf0 \
  pres = worldMem.\cf2 newModelResource\cf0 (\cf4 "explosion"\cf0 ,\cf2 #particle\cf0 )\
  pulse = worldMem.\cf2 newModel\cf0 (\cf4 "Pulser"\cf0 , pres)\
  \
  speed =\cf4  50\cf0 \
  pres.\cf2 emitter\cf0 .\cf2 minspeed\cf0 =speed/\cf4 1.5\cf0 \
  pres.\cf2 emitter\cf0 .\cf2 maxspeed\cf0 =speed\
  \cf5 --pres.gravity = vector(10.8,-77.9, 1.9)\
\cf0   pres.\cf2 emitter\cf0 .\cf2 mode\cf0  =\cf2  #stream\cf0 \
  pres.\cf2 colorRange\cf0 .\cf2 start\cf0 =\cf2 rgb\cf0 (\cf4 "#ffffff"\cf0 )\
  pres.\cf2 colorRange\cf0 .\cf3 end\cf0 =\cf2 rgb\cf0 (\cf4 "#99d400"\cf0 )\
  pres.\cf2 lifetime\cf0 =\cf4 2000\cf0 \
  pres.\cf2 texture\cf0 =txt\
  pres.\cf2 tweenmode\cf0 =\cf2 #age\cf0 \
  \cf5 -- also pres.tweenmode=#velocity\
\cf0   pres.\cf2 drag\cf0 =\cf4 10\cf0 \
  \cf5 --pres.lifetime=100\
\cf0   pres.\cf2 blendrange\cf0 .\cf2 start\cf0 =\cf4 100\cf0 \
  pres.\cf2 blendrange\cf0 .\cf3 end\cf0 =\cf4 10\cf0 \
  pres.\cf2 sizerange\cf0 .\cf2 start\cf0 =\cf4 3\cf0 \
  pres.\cf2 sizerange\cf0 .\cf3 end\cf0 =\cf4 0.2\cf0 \
  \cf5 --pres.emitter.path=[vector(0,14,-20), vector(-10,8,20),vector(50,0,-10)]\
\cf0   pres.\cf2 emitter\cf0 .\cf2 path\cf0 =[\cf2 vector\cf0 (\cf4 0\cf0 ,\cf4 0\cf0 ,\cf4 0\cf0 )]\
  \
  \cf5 -- quadrilateral\
\cf0   \cf5 --pres.emitter.region=[vector(2,9,10),vector(3,9,10),vector(3,10,10),vector(2,-10,10)]\
\cf0   \
  \cf5 -- point\
\cf0   pres.\cf2 emitter\cf0 .\cf2 region\cf0 =[\cf2 vector\cf0 (\cf4 0\cf0 ,\cf4 0\cf0 ,\cf4 0\cf0 )]\
  \
  \cf5 --line segment\
\cf0   \cf5 --pres.emitter.region=[vector(2,9,10),vector(4,18,20)]\
\cf0   \
  cam=\cf2 sprite\cf0 (\cf3 me\cf0 .\cf2 spritenum\cf0 ).\cf2 camera\cf0 \
  cam.\cf2 translate\cf0 (\cf4 0\cf0 ,\cf4 0\cf0 ,-\cf4 150\cf0 )\
\
\
\
\
\
\
\
\
\ul parameters\ulnone \
\
speed\
emitter min and max speed\
gravity\
colorRange start & end\
life\
tweenmode (age or velocity)\
drag\
size range\
emitter path\
emitter region\
camera\
\
\
\
\
on exitFrame me\
  \
  if gEnter = 1 then\
    -- if bias was not selected the motion is truly random and can\
    -- change direction at any time\
    set vRan = random(2)\
    set hRan = random(2)\
    if pBias = FALSE then\
      set pick = [1, -1]\
      \
      set pHDir = getAt(pick, random(2))\
      set pVDir = getAt(pick, random(2))\
    end if\
    \
    -- calculate vertical motion\
    \
    set currentV = sprite(pMySprite).locV\
    set vMove = (vRan * pSpeed) * pVDir\
    set newV = currentV + vMove\
    if newV > pBottom OR newV < pTop then\
      set pVDir = pVDir * -1\
      set vMove = (vRan * pSpeed) * pVDir\
      set newV = currentV + vMove\
    end if\
    \
    -- calculate horizontal motion\
    \
    set currentH = sprite(pMySprite).locH\
    set hMove = (hRan & pSpeed) * pHDir\
    set newH = currentH + hMove\
    if newH > pRight OR newH < pLeft then\
      set pHDir = pHDir * -1\
      set hMove = (hRan & pSpeed) * pHDir\
      set newH = currentH + hMove\
    end if\
    \
    -- set the new location for the sprite\
    \
    sprite(pMySprite).loc = point(newH, newV)\
    \
    -- set the blend for the sprite\
    \
    pBlend = pBlend - pFadeRate\
    if pBlend <= 10 then\
      pBlend = 0\
      sprite(pMySprite).blend = pBlend\
      exit\
    end if\
    sprite(pMySprite).blend = pBlend\
    \
  else\
    \
    -- swarm the sprite back to its original location\
    set delayLoc = (point(pOrigLoc[1], pOrigloc[2]) \\\
- the loc of sprite(pMySprite)) / pFriction\
    set newLoc = sprite(pMySprite).loc + delayLoc\
    sprite(pMySprite).loc = newLoc\
    \
    -- set the blend back to 100%\
    pBlend = 100\
    sprite(pMySprite).blend = pBlend\
    \
  end if\
\
\
\
  set hMargin = (sprite(pMySprite).width) / 2\
  set vMargin = (sprite(pMySprite).height) / 2\
  set pBottom = (the stageBottom - the stageTop) - vMargin\
  set pTop = vMargin\
  set pRight = (the stageRight - the stageLeft) - hMargin\
  set pLeft = hMargin\
  }