{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs20 \cf2 /////////////////////////////// Make Buffers - Define Synths\cf0 \
\
( \
s = \cf3 Server\cf0 .internal;\
\cf3 Server\cf0 .default = s;\
s.boot;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li1700\fi-1700\ql\qnatural
\cf0 b = \cf3 Buffer\cf0 .new(s);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 s.sendMsg(\cf4 \\b_allocRead\cf0 , 10, \cf5 "sounds/a11wlk01.wav"\cf0 );\
s.sendMsg(\cf4 \\b_allocRead\cf0 , 9, \cf5 "sounds/many_bells_mono.aif"\cf0 );\
s.sendMsg(\cf4 \\b_allocRead\cf0 , 8, \cf5 "sounds/beesmono_sm.aiff"\cf0 );\
a = s.addr;\
\
d = \cf3 SynthDef\cf0 (\cf5 "sinegrain01"\cf0 , \{ \cf3 arg\cf0  bufNum = 10, trate = 2, pbrate = 1, centerPos = 0.5, dur = 0.1, pan = 0.5, amp = 0.1;\
	\cf3 var\cf0  out;\
	\
	\cf2 //TGrains.ar(numChannels, trigger, bufnum, rate, centerPos, dur, pan, amp, interp)\cf0 \
	\cf2 // trate = triger rate in CPS\cf0 \
	\cf2 // pbrate = play back rate of the sound file as a muliple (i.e. 0.5 = 1/2 rate, 1 full rate, and 2 = twice the rate)\cf0 \
	\cf2 // centerPos = a float between 0 and 1\cf0 \
	\cf2 // dur = grain duration\cf0 \
	\cf2 // pan = pan -1 -> 1\cf0 \
	\cf2 // amp = 0.0 -> 1.0\cf0 \
	out = \cf3 TGrains\cf0 .ar(2, \cf3 Impulse\cf0 .ar(trate), bufNum, pbrate, centerPos * \cf3 BufDur\cf0 .kr(bufNum), dur, pan, amp, 2);\
	\cf3 Out\cf0 .ar(0, out);\
	\
	\});\
	\
d.load(s);\
\
d = \cf3 Synth\cf0 .new(\cf5 "sinegrain01"\cf0 );\
d.run(\cf3 false\cf0 );\
)\
\
\cf2 //b.free;\cf0 \
\
\cf2 /////////////////////////////// GLOBAL PARAMETER ARRAY\cf0 \
(\
\cf2 //This how the View communicates with the controller. \cf0 \
\cf2 // Control values from user input are written to the ~paramArray,\cf0 \
\cf2 // which are then read by the Grain Scheduler below.\cf0 \
\cf2 //bufNum, trate = 2, pbrate = 1, centerPos = 0.5, dur = 0.1, pan = 0.5, amp = 0.1 ;\cf0 \
~paramArray = [8, 10, 50.0, 200.0, -1.0, 1.0, 0.5, 0.8, 0.1, 0.1, 1.0, -1.0, 0.25, 0.5];\
~paramArray.postln; \cf2 //for testing\cf0 \
\
\
\cf2 //n = NetAddr("127.0.0.1", 12000);\cf0 \
\
~routine = \cf3 Routine\cf0 (\{\
			\cf3 var\cf0  lowerBuf, upperBuf;	\
			\cf3 var\cf0  lowerDisp, upperDisp, lowerpbrate, upperpbrate, lowercenterPos;\
			\cf3 var\cf0  uppercenterPos, lowerdur, upperdur, lowerAmp, upperAmp, lowerPan, upperPan;\
			\cf3 var\cf0  bufNum, dispersion, trate, pbrate, centerPos, dur, pan, amp;\
	\
			\cf2 //Run indefinitely\cf0 \
			\cf3 inf\cf0 .do(\{\
				\cf2 //The ~paramArray is polled before each grain is made\cf0 \
				lowerBuf = ~paramArray.at(0);\
				upperBuf = ~paramArray.at(1);\
				lowerDisp = ~paramArray.at(2);\
				upperDisp = ~paramArray.at(3);\
				lowerpbrate = ~paramArray.at(4);\
				upperpbrate = ~paramArray.at(5);\
				lowercenterPos = ~paramArray.at(6);\
				uppercenterPos = ~paramArray.at(7);\
				lowerdur = ~paramArray.at(8);\
				upperdur = ~paramArray.at(9);\
				lowerPan = ~paramArray.at(10);\
				upperPan = ~paramArray.at(11);\
				lowerAmp = ~paramArray.at(12);\
				upperAmp = ~paramArray.at(13);\
				\
				\
							\
				\cf2 //Grains are created by calling the 'Model's' Synth Definition here:\cf0 \
			\
					\cf2 //Parameters are created by random number generators with a given range.\cf0 \
					\cf2 // If the range values are equal, then the output will be deterministic\cf0 \
					\
					\
					bufNum =lowerBuf.rrand(upperBuf);\
				 	dispersion = lowerDisp.rrand(upperDisp);\
					pbrate = lowerpbrate.rrand(upperpbrate);\
					centerPos = lowercenterPos.rrand(uppercenterPos);\
				     dur = lowerdur.rrand(upperdur);\
					pan = lowerPan.rrand(upperPan);\
					amp = lowerAmp.rrand(upperAmp);\
					\
					d.set( \cf4 \\bufNum\cf0 , bufNum );\
					d.set( \cf4 \\trate\cf0 , dispersion );\
					d.set( \cf4 \\pbrate\cf0 , pbrate );\
					d.set( \cf4 \\centerPos\cf0 , centerPos );\
				     d.set( \cf4 \\dur\cf0 , dur );\
					d.set( \cf4 \\pan\cf0 , pan );\
					d.set( \cf4 \\amp\cf0 , amp );\
				\
				\cf2 //	n.sendMsg("/particles/numP", dispersion * 2);//density\cf0 \
				\cf2 //	n.sendMsg("/particles/speed", ((pbrate + 2)/4) * 300);//playback rate\cf0 \
				\cf2 // freq v. pan v amp - pushes against gravity\cf0 \
					n.sendBundle(0.2, [\cf5 "/particles/path"\cf0 , (abs(pan - 1) - 1) * 20, (abs(pbrate) * 20) - 20, dispersion/10]);				\cf2 //	n.sendMsg("/particles/pathStrength", amp); // how much push from path\cf0 \
					\cf2 // buffer position range abs(lowercenterPos - uppercenterPos)\cf0 \
				\cf2 //	n.sendMsg("/particles/drag", abs(lowercenterPos - uppercenterPos));\cf0 \
					n.sendBundle(0.2, [\cf5 "/particles/gravity"\cf0 , 4, 4, 4]);\cf2 //(freq v. pan v amp) exerts force on path\cf0 \
				\cf2 //	n.sendMsg("/particles/life", dur * 9000);//grain duration\cf0 \
				\
			\cf2 /*		n.sendMsg("/particles/numP", 250);//density\
					n.sendMsg("/particles/speed", 88);//playback rate\
					n.sendBundle(0.2, ["/particles/path", 1.91, 0.19, -15.13]);// freq v. pan v amp - pushes against gravity\
					n.sendMsg("/particles/pathStrength", 0.002); // how much push from path\
					n.sendMsg("/particles/drag", 1);// buffer position range abs(lowercenterPos - uppercenterPos)\
					n.sendBundle(0.2, ["/particles/gravity", 4.05, -50.48, 8.0]);//(freq v. pan v amp) exerts force on path\
					n.sendMsg("/particles/life", 9000);//grain duration\
					color*/\cf0 \
\
				\cf2 //the wait time\cf0 \
				0.1.yield;\
			\});\
		\
		\});\
)\
\
\
\cf2 ///////////////////////////MIDI Mapping\cf0 \
\
\cf2 //~paramArray.put(paramPos2, mapping.asSpec.map(upperSlide.value))\cf0 \
\cf3 MIDIIn\cf0 .connect; 	\cf2 // init for one port midi interface\cf0 \
\
(\
\cf3 MIDIIn\cf0 .control = \{ \cf3 arg\cf0  src, chan, num, val; \
				\cf3 var\cf0  dispersion, pbrate, bufPosition, grainDur, pan, amp;	\
				[chan,num,val].postln; \
				\
				dispersion = ((val/127) * 1000) + 10;\
				pbrate = ((val/127) * 4) - 2;\
				bufPosition = val/127;\
				grainDur = val/127 + 0.01;\
				pan = ((abs((val/128 + 0.01) - 1) ) * 2) - 1;\
				amp =val/127;\
\
			if ( num == 89 )\{	\cf2 /*lowerBuf*/\cf0   ~paramArray.put(0, 8); \};\
			if ( num == 90 )\{	\cf2 /*upperBuf*/\cf0   ~paramArray.put(1, 10); \};\
			if ( num == 91 )\{	\cf2 /*lowerDisp*/\cf0   ~paramArray.put(2, dispersion); \};\
			if ( num == 92 )\{	\cf2 /*upperDisp*/\cf0   ~paramArray.put(3, dispersion); \};\
			if ( num == 93 )\{	\cf2 /*lowerpbrate*/\cf0   ~paramArray.put(4, pbrate); \};\
			if ( num == 94 )\{	\cf2 /*upperpbrate*/\cf0   ~paramArray.put(5, pbrate); \};\
			if ( num == 95 )\{	\cf2 /*lowercenterPos*/\cf0   ~paramArray.put(6, bufPosition); \};\
			if ( num == 96 )\{	\cf2 /*uppercenterPos*/\cf0   ~paramArray.put(7, bufPosition); \};\
			if ( num == 97 )\{	\cf2 /*lowerdur*/\cf0   ~paramArray.put(8, grainDur); \};\
			if ( num == 98 )\{	\cf2 /*upperdur*/\cf0   ~paramArray.put(9, grainDur); \};\
			if ( num == 99 )\{	\cf2 /*lowerPan*/\cf0   ~paramArray.put(10, pan); \};\
			if ( num == 100 )\{	\cf2 /*upperPan*/\cf0   ~paramArray.put(11, pan); \};\
			if ( num == 101 )\{	\cf2 /*lowerAmp*/\cf0   ~paramArray.put(12, amp); \};\
			if ( num == 102 )\{	\cf2 /*upperAmp*/\cf0   ~paramArray.put(13, amp); \};\
\
			\cf2 //play the Routine			\cf0 \
			if ( num == 107 )\{ \
							if (val == 127, \{\
									\cf3 SystemClock\cf0 .play(~routine);\
									if (d.isRunning, \{\cf3 nil\cf0 \},\{d = \cf3 Synth\cf0 .new(\cf5 "sinegrain01"\cf0 )\});\
									\
									\}, \{\
									\cf3 SystemClock\cf0 .clear(~routine); \
									d.free;\
									\}); \
								\};\
					\
				\};						\
)\
\
\cf2 /////////////////GUI\cf0 \
\
(\
\cf3 var\cf0  slider1, slider2, slider3, slider4, slider5, slider6, slider7, spacing;\
\cf3 var\cf0  numBoxLo1, numBoxHi1, numBoxLo2, numBoxHi2, numBoxLo3, numBoxHi3, numBoxLo4, numBoxHi4;\
\cf3 var\cf0  numBoxLo5, numBoxHi5, numBoxLo6, numBoxHi6, numBoxLo7, numBoxHi7;\
\
w = \cf3 SCWindow\cf0 (\cf5 "grain control"\cf0 , \cf3 Rect\cf0 (20, 600, 250, 625));\
\
\cf2 // add a button to start and stop the sound.\cf0 \
b = \cf3 SCButton\cf0 (w, \cf3 Rect\cf0 (150, 15, 70, 30));\
b.states = [[\cf5 "Start"\cf0 , \cf3 Color\cf0 .black, \cf3 Color\cf0 .green],[\cf5 "Stop"\cf0 , \cf3 Color\cf0 .white, \cf3 Color\cf0 .red]];\
b.action = \{\cf3 |view|\cf0 \
		if (view.value == 1) \{\
			\cf3 SystemClock\cf0 .play(~routine);\
			if (d.isRunning, \{\cf3 nil\cf0 \},\{d = \cf3 Synth\cf0 .new(\cf5 "sinegrain01"\cf0 )\});\
		\};\
		if (view.value == 0) \{\
			\cf3 SystemClock\cf0 .clear(~routine);\
			d.free;\
		\};\
\};\
\
spacing = 80;\
\
\cf2 /////Sliders\cf0 \
slider1 = \cf3 SCRangeSlider\cf0 (w, \cf3 Rect\cf0 (20, 1 * spacing, 200, 30));\
slider2 = \cf3 SCRangeSlider\cf0 (w, \cf3 Rect\cf0 (20, 2 * spacing, 200, 30));\
slider3 = \cf3 SCRangeSlider\cf0 (w, \cf3 Rect\cf0 (20, 3 * spacing, 200, 30));\
slider4 = \cf3 SCRangeSlider\cf0 (w, \cf3 Rect\cf0 (20, 4 * spacing, 200, 30));\
slider5 = \cf3 SCRangeSlider\cf0 (w, \cf3 Rect\cf0 (20, 5 * spacing, 200, 30));\
slider6 = \cf3 SCRangeSlider\cf0 (w, \cf3 Rect\cf0 (20, 6 * spacing, 200, 30));\
slider7 = \cf3 SCRangeSlider\cf0 (w, \cf3 Rect\cf0 (20, 7 * spacing, 200, 30));\
\
\cf2 ///Number Boxes\cf0 \
 numBoxLo1 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (70, 1 * spacing + 32, 45, 15), 50, 15);\
 numBoxHi1 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (120, 1 * spacing + 32, 45, 15), 50, 15);\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (57, 1 * spacing + 25, 30, 30)).string = \cf5 "lo"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (170, 1 * spacing + 25, 30, 30)).string = \cf5 "hi"\cf0 ;\
 \
 numBoxLo2 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (70, 2 * spacing + 32, 45, 15), 50, 15);\
 numBoxHi2 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (120, 2 * spacing + 32, 45, 15), 50, 15);\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (57, 2 * spacing + 25, 30, 30)).string = \cf5 "lo"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (170, 2 * spacing + 25, 30, 30)).string = \cf5 "hi"\cf0 ;\
\
 numBoxLo3 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (70, 3 * spacing + 32, 45, 15), 50, 15);\
 numBoxHi3 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (120, 3 * spacing + 32, 45, 15), 50, 15);\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (57, 3 * spacing + 25, 30, 30)).string = \cf5 "lo"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (170, 3 * spacing + 25, 30, 30)).string = \cf5 "hi"\cf0 ;\
\
\
 numBoxLo4 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (70, 4 * spacing + 32, 45, 15), 50, 15);\
 numBoxHi4 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (120, 4 * spacing + 32, 45, 15), 50, 15);\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (57, 4 * spacing + 25, 30, 30)).string = \cf5 "lo"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (170, 4 * spacing + 25, 30, 30)).string = \cf5 "hi"\cf0 ;\
\
\
 numBoxLo5 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (70, 5 * spacing + 32, 45, 15), 50, 15);\
 numBoxHi5 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (120, 5 * spacing + 32, 45, 15), 50, 15);\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (57, 5 * spacing + 25, 30, 30)).string = \cf5 "lo"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (170, 5 * spacing + 25, 30, 30)).string = \cf5 "hi"\cf0 ;\
\
\
 numBoxLo6 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (70, 6 * spacing + 32, 45, 15), 50, 15);\
 numBoxHi6 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (120, 6 * spacing + 32, 45, 15), 50, 15);\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (57, 6 * spacing + 25, 30, 30)).string = \cf5 "lo"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (170, 6 * spacing + 25, 30, 30)).string = \cf5 "hi"\cf0 ;\
\
 numBoxLo7 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (70, 7 * spacing + 32, 45, 15), 50, 15);\
 numBoxHi7 = \cf3 SCNumberBox\cf0 (w, \cf3 Rect\cf0 (120, 7 * spacing + 32, 45, 15), 50, 15);\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (57, 7 * spacing + 25, 30, 30)).string = \cf5 "lo"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (170, 7 * spacing + 25, 30, 30)).string = \cf5 "hi"\cf0 ;\
\
\cf2 /////Labels\cf0 \
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 1 * spacing - 25, 200, 30)).string = \cf5 "Buffer Number"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 1 * spacing + 25, 30, 30)).string = \cf5 "1"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (210, 1 * spacing + 25, 30, 30)).string = \cf5 "10"\cf0 ;\
 \
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 2 * spacing - 25, 200, 30)).string = \cf5 "Grain Dispersion"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 2 * spacing + 25, 30, 30)).string = \cf5 "10"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (195, 2 * spacing + 25, 30, 30)).string = \cf5 "1000"\cf0 ;\
 \
  \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 3 * spacing - 25, 200, 30)).string = \cf5 "Play Back Rate"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 3 * spacing + 25, 30, 30)).string = \cf5 "-2"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (215, 3 * spacing + 25, 30, 30)).string = \cf5 "2"\cf0 ;\
 \
  \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 4 * spacing - 25, 200, 30)).string = \cf5 "Buffer Center Position"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 4 * spacing + 25, 30, 30)).string = \cf5 "0"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (215, 4 * spacing + 25, 30, 30)).string = \cf5 "1"\cf0 ;\
 \
  \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 5 * spacing - 25, 200, 30)).string = \cf5 "Grain Duration"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 5 * spacing + 25, 30, 30)).string = \cf5 "0.01"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (215, 5 * spacing + 25, 30, 30)).string = \cf5 "1"\cf0 ;\
 \
  \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 6 * spacing - 25, 200, 30)).string = \cf5 "Pan"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 6 * spacing + 25, 30, 30)).string = \cf5 "-1"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (215, 6 * spacing + 25, 30, 30)).string = \cf5 "1"\cf0 ;\
 \
  \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 7 * spacing - 25, 200, 30)).string = \cf5 "Amplitude"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (20, 7 * spacing + 25, 30, 30)).string = \cf5 "0"\cf0 ;\
 \cf3 SCStaticText\cf0 (w, \cf3 Rect\cf0 (215, 7 * spacing + 25, 30, 30)).string = \cf5 "1"\cf0 ;\
\
\cf2 /////GUI Mapping\cf0 \
				slider1.lo_( (~paramArray.at(0)/ 10) );\cf2 /*lowerBuf*/\cf0 \
				slider1.hi_( (~paramArray.at(1)/ 10) );\cf2 /*upperBuf*/\cf0  \
				slider2.lo_( (~paramArray.at(2) - 10)/ 1000 );\cf2 /*lowerDisp*/\cf0  \
				slider2.hi_( (~paramArray.at(3) - 10)/ 1000 );\cf2 /*upperDisp*/\cf0 \
				slider3.lo_( (~paramArray.at(4) + 2)/ 4 );\cf2 /*lowerpbrate*/\cf0 \
				slider3.hi_( (~paramArray.at(5) + 2)/ 4 );\cf2 /*upperpbrate*/\cf0 \
				slider4.lo_( ~paramArray.at(6) );\cf2 /*lowercenterPos*/\cf0 \
				slider4.hi_( ~paramArray.at(7) );\cf2 /*uppercenterPos*/\cf0 \
				slider5.lo_( ~paramArray.at(8) - 0.01 );\cf2 /*lowerdur*/\cf0 \
				slider5.hi_( ~paramArray.at(9) - 0.01 );\cf2 /*upperdur*/\cf0 \
				slider6.lo_( (abs((~paramArray.at(10)) - 1) ) / 2 );\cf2 /*lowerPan*/\cf0 \
				slider6.hi_( (abs((~paramArray.at(11)) - 1) ) / 2 );\cf2 /*upperPan*/\cf0 \
				slider7.lo_( ~paramArray.at(12) );\cf2 /*lowerAmp*/\cf0 \
				slider7.hi_( ~paramArray.at(13) );\cf2 /*upperAmp*/\cf0 \
				\
				numBoxLo1.value_( ~paramArray.at(0) );\cf2 /*lowerBuf*/\cf0 \
				numBoxHi1.value_( ~paramArray.at(1) );\cf2 /*upperBuf*/\cf0  \
				numBoxLo2.value_( (~paramArray.at(2) - 10)/ 1000 );\cf2 /*lowerDisp*/\cf0 \
				numBoxHi2.value_( (~paramArray.at(3) - 10)/ 1000 );\cf2 /*upperDisp*/\cf0 \
				numBoxLo3.value_( (~paramArray.at(4) + 2)/ 4 );\cf2 /*lowerpbrate*/\cf0 \
				numBoxHi3.value_( (~paramArray.at(5) + 2)/ 4 );\cf2 /*upperpbrate*/\cf0 \
				numBoxLo4.value_( ~paramArray.at(6) );\cf2 /*lowercenterPos*/\cf0 \
				numBoxHi4.value_( ~paramArray.at(7) );\cf2 /*uppercenterPos*/\cf0 \
				numBoxLo5.value_( ~paramArray.at(8) - 0.01 );\cf2 /*lowerdur*/\cf0 \
				numBoxHi5.value_( ~paramArray.at(9) - 0.01 );\cf2 /*upperdur*/\cf0 \
				numBoxLo6.value_( (abs((~paramArray.at(10)) - 1) ) / 2 );\cf2 /*lowerPan*/\cf0 \
				numBoxHi6.value_( (abs((~paramArray.at(11)) - 1) ) / 2 );\cf2 /*upperPan*/\cf0 \
				numBoxLo7.value_( ~paramArray.at(12) );\cf2 /*lowerAmp*/\cf0 \
				numBoxHi7.value_( ~paramArray.at(13) );\cf2 /*upperAmp*/\cf0 \
				\
			slider1.action = \{	\cf2 /*lowerBuf*/\cf0   ~paramArray.put(0, 8); \
							\
							numBoxLo1.value = ([0, 10, \cf4 \\linear\cf0 , 1, ~paramArray.at(0)])\
							.asSpec.map(slider1.lo);\
							\
							\cf2 /*upperBuf*/\cf0   ~paramArray.put(1, 10); \
							\
							numBoxHi1.value = ([0, 10, \cf4 \\linear\cf0 , 1, ~paramArray.at(1)])\
							.asSpec.map(slider1.hi);\
							\};\
			\
			slider2.action = \{	\cf2 /*lowerDisp*/\cf0   ~paramArray.put(2, (slider2.lo.value * 1000) + 10); \
							\
							numBoxLo2.value = ([10.0, 1010, \cf4 \\exponential\cf0 , 0.001, (~paramArray.at(2) - 10)/ 1000])\
							.asSpec.map(slider2.lo);\
							\
							\cf2 /*upperDisp*/\cf0   ~paramArray.put(3, (slider2.hi.value * 1000) + 10); \
							\
							numBoxHi2.value = ([10.0, 1010, \cf4 \\exponential\cf0 , 0.001, (~paramArray.at(3) - 10)/ 1000])\
							.asSpec.map(slider2.hi);\
							\};\
\
			slider3.action = \{	\cf2 /*lowerpbrate*/\cf0   ~paramArray.put(4, ((slider3.lo.value) * 4) - 2); \
							\
							numBoxLo3.value = ([-2.0, 2.0, \cf4 \\linear\cf0 , 0.001, (~paramArray.at(4) + 2)/ 4])\
							.asSpec.map(slider3.lo);\
							\
							\cf2 /*upperpbrate*/\cf0   ~paramArray.put(5, ((slider3.hi.value) * 4) - 2); \
							\
							numBoxHi3.value = ([-2.0, 2.0, \cf4 \\linear\cf0 , 0.001, (~paramArray.at(5) + 2)/ 4])\
							.asSpec.map(slider3.hi);\
							\};\
			\
			slider4.action = \{	\cf2 /*lowercenterPos*/\cf0   ~paramArray.put(6, slider4.lo.value);\
			\
							numBoxLo4.value = ([0.0, 1, \cf4 \\linear\cf0 , 0.001, ~paramArray.at(6)])\
							.asSpec.map(slider4.lo);\
							\
							\cf2 /*uppercenterPos*/\cf0   ~paramArray.put(7, slider4.hi.value); \
							\
							numBoxHi4.value = ([0.0, 1, \cf4 \\linear\cf0 , 0.001, ~paramArray.at(7)])\
							.asSpec.map(slider4.hi);\
							\};\
			\
			slider5.action = \{	\cf2 /*lowerdur*/\cf0   ~paramArray.put(8, slider5.lo.value + 0.01); \
							\
							numBoxLo5.value = ([0.0, 1, \cf4 \\linear\cf0 , 0.001, ~paramArray.at(8) - 0.01])\
							.asSpec.map(slider5.lo);\
							\
							\cf2 /*upperdur*/\cf0   ~paramArray.put(9, slider5.hi.value + 0.01); \
							\
							numBoxHi5.value = ([0.0, 1, \cf4 \\linear\cf0 , 0.001, ~paramArray.at(9) - 0.01])\
							.asSpec.map(slider5.hi);\
							\};\
							\
			slider6.action = \{	\cf2 /*lowerPan*/\cf0   ~paramArray.put(10, ((abs((slider6.lo.value + 0.01) - 1) ) * 2) - 1);\
							 \
							numBoxLo6.value = ([-1.0, 1.0, \cf4 \\linear\cf0 , 0.001, (abs((~paramArray.at(10)) - 1) ) / 2])\
							.asSpec.map(slider6.lo);\
							\
							\cf2 /*upperPan*/\cf0   ~paramArray.put(11, ((abs((slider6.hi.value + 0.01) - 1) ) * 2) - 1);\
							\
							numBoxHi6.value = ([-1.0, 1.0, \cf4 \\linear\cf0 , 0.001, (abs((~paramArray.at(11)) - 1) ) / 2])\
							.asSpec.map(slider6.hi);\
							\};\
			\
			slider7.action = \{	\cf2 /*lowerAmp*/\cf0   ~paramArray.put(12, slider7.lo.value);\
							\
							numBoxLo7.value = ([0.0, 1.0, \cf4 \\linear\cf0 , 0.001, ~paramArray.at(12)])\
							.asSpec.map(slider7.lo);\
							\
							\cf2 /*upperAmp*/\cf0   ~paramArray.put(13, slider7.hi.value); \
							\
							numBoxHi7.value = ([0.0, 1.0, \cf4 \\linear\cf0 , 0.001, ~paramArray.at(13)])\
							.asSpec.map(slider7.hi);\
							\};\
\
w.front; \cf2 // make window visible and front window.\cf0 \
\
)\
\
\
\
\cf2 ///////////////////////////////TEMP NOTES\cf0 \
\
\
\cf2 ////////////////////setup communication with temp server\cf0 \
(\
n = \cf3 NetAddr\cf0 (\cf5 "127.0.0.1"\cf0 , 12000);\
n.sendMsg(\cf5 "/temp/connect/57120/tempSC"\cf0 ); \cf2 // 57120 is sclang default port\cf0 \
\
r = \cf3 OSCresponder\cf0 (\cf3 nil\cf0 , \cf4 '/temp/ping'\cf0 , \{ \cf3 arg\cf0  time, resp, msg; \
				\cf4 'ping'\cf0 .postln; \
				n.sendMsg(\cf5 "/temp/pingreturn/57120"\cf0 );\}).add;\
)\
\
\cf2 //=////////Controlling Director via Temp\cf0 \
\
n.sendMsg(\cf5 "/particles/numP"\cf0 , 250);\
n.sendMsg(\cf5 "/particles/speed"\cf0 , 48);\
n.sendBundle(0.2, [\cf5 "/particles/path"\cf0 , 1.91, 0.19, -15.13]);\
n.sendMsg(\cf5 "/particles/pathStrength"\cf0 , 0.002);\
n.sendMsg(\cf5 "/particles/drag"\cf0 , 1);\
n.sendBundle(0.2, [\cf5 "/particles/gravity"\cf0 , 1.05, -1.08, -1.8]);\
n.sendMsg(\cf5 "/particles/life"\cf0 , 6000);\
\
n.sendBundle(0.2, ["/particles/colorRange", 221, 15, 22, 51, 57, 253]);\
n.sendBundle(0.2, ["/particles/sizeRange", 2.4, 11.9]);\
n.sendBundle(0.2, ["/particles/blendRange", 100,20]);\
n.sendMsg(\cf5 "/particles/angle", 11.1\cf0 );\
n.sendBundle(0.2, [\cf5 "/particles/direction"\cf0 , 114.05, 5.8, -18.09]);\
\
\
\cf2 //////////Disconnect\cf0 \
\
n.sendMsg(\cf5 "/temp/disconnect/57120"\cf0 );\
\
\
\cf2 /////////\cf0 \
}